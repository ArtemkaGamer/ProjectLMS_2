import sqlite3
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import html_decoration as hd
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = '7555505954:AAGwbkcLkHOxQUVsd2zpX2ObmnlThhdWpfE'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
MAX_PAGES = 3
MOVIES_PER_PAGE = 5

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class Form(StatesGroup):
    movie = State()
    full_name = State()
    phone = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS movies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        show_date TEXT NOT NULL,
        ticket_price INTEGER NOT NULL,
        hall TEXT NOT NULL
    )
    """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        full_name TEXT,
        phone TEXT,
        movie_title TEXT,
        show_date TEXT,
        ticket_price INTEGER,
        hall TEXT,
        booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
    cursor.execute("SELECT COUNT(*) FROM movies")
    if cursor.fetchone()[0] == 0:
        test_movies = [
            ("–ê–≤–∞—Ç–∞—Ä", "2023-12-15 18:00", 350, "–ó–∞–ª 1"),
            ("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "2023-12-15 21:00", 300, "–ó–∞–ª 2"),
            ("–î—é–Ω–∞", "2023-12-16 15:00", 400, "–ó–∞–ª 1"),
            ("–ù–∞—á–∞–ª–æ", "2023-12-16 18:00", 250, "–ó–∞–ª 3"),
            ("–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å", "2023-12-16 21:00", 350, "–ó–∞–ª 2"),
            ("–ú–∞—Ç—Ä–∏—Ü–∞", "2023-12-17 16:00", 300, "–ó–∞–ª 1"),
            ("–ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞", "2023-12-17 19:00", 200, "–ó–∞–ª 3"),
            ("–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü", "2023-12-17 22:00", 250, "–ó–∞–ª 2"),
            ("–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø", "2023-12-18 17:00", 300, "–ó–∞–ª 1"),
            ("–ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è", "2023-12-18 20:00", 350, "–ó–∞–ª 3")
        ]
        cursor.executemany("INSERT INTO movies (title, show_date, ticket_price, hall) VALUES (?, ?, ?, ?)", test_movies)
    
    conn.commit()
    conn.close()

init_db()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")]
    ],
    resize_keyboard=True
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
def get_movies():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, show_date, ticket_price, hall FROM movies ORDER BY show_date")
    movies = cursor.fetchall()
    conn.close()
    return movies

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
def get_movie_info(title, date):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, show_date, ticket_price, hall FROM movies WHERE title = ? AND show_date = ?", (title, date))
    movie = cursor.fetchone()
    conn.close()
    return movie

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–∏–ª—å–º–∞–º–∏
def get_movies_page(page=1):
    movies = get_movies()
    total_pages = min(MAX_PAGES, (len(movies) + MOVIES_PER_PAGE - 1) // MOVIES_PER_PAGE)
    page = max(1, min(page, total_pages))
    
    start = (page - 1) * MOVIES_PER_PAGE
    end = start + MOVIES_PER_PAGE
    page_movies = movies[start:end]
    
    message = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ ‚Äì —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>\n\n"
    for title, date, price, hall in page_movies:
        message += f"üé¨ <b>{hd.quote(title)}</b>\nüìÖ {hd.quote(date)}\nüíµ {price}‚ÇΩ\nüèõ –ó–∞–ª: {hd.quote(hall)}\n\n"
    
    return message, page, total_pages

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def get_pagination_keyboard(page, total_pages):
    buttons = []
    
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if page < total_pages and page < MAX_PAGES:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    
    return InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ–∏–ª—å–º–∞–º–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def get_movies_booking_keyboard():
    movies = get_movies()
    keyboard = []
    for title, date, price, hall in movies:
        keyboard.append([InlineKeyboardButton(
            text=f"{title} ({date}) - {price}‚ÇΩ",
            callback_data=f"book_{title}_{date}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def save_booking(user_id, full_name, phone, movie_title, show_date, ticket_price, hall):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO bookings (user_id, full_name, phone, movie_title, show_date, ticket_price, hall)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (user_id, full_name, phone, movie_title, show_date, ticket_price, hall))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üé• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restart
@dp.message(Command("restart"))
async def cmd_restart(message: types.Message):
    await message.answer(
        "üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@dp.message(F.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    schedule_text, page, total_pages = get_movies_page(1)
    keyboard = get_pagination_keyboard(page, total_pages)
    await message.answer(schedule_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    schedule_text, page, total_pages = get_movies_page(1)
    keyboard = get_pagination_keyboard(page, total_pages)
    await message.answer(schedule_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query(F.data.startswith("page_"))
async def process_pagination(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[1])
    schedule_text, current_page, total_pages = get_movies_page(page)
    keyboard = get_pagination_keyboard(current_page, total_pages)
    
    await callback.message.edit_text(
        text=schedule_text,
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
@dp.message(F.text.lower() == "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def start_booking(message: types.Message, state: FSMContext):
    await message.answer(
        "üéü –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_movies_booking_keyboard()
    )
    await state.set_state(Form.movie)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞
@dp.callback_query(F.data.startswith("book_"), Form.movie)
async def select_movie(callback: types.CallbackQuery, state: FSMContext):
    _, title, date = callback.data.split("_", 2)
    movie_info = get_movie_info(title, date)
    
    if not movie_info:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    await state.update_data(
        movie_title=title,
        show_date=date,
        ticket_price=movie_info[2],
        hall=movie_info[3]
    )
    
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    await state.set_state(Form.full_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@dp.message(Form.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)")
        return
    
    await state.update_data(full_name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(Form.phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if not phone.replace("+", "").isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    save_booking(
        user_id=message.from_user.id,
        full_name=data['full_name'],
        phone=phone,
        movie_title=data['movie_title'],
        show_date=data['show_date'],
        ticket_price=data['ticket_price'],
        hall=data['hall']
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirmation = (
        "‚úÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∞–Ω—Å–µ:</b>\n"
        f"üé¨ –§–∏–ª—å–º: {data['movie_title']}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['show_date']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: {data['ticket_price']}‚ÇΩ\n"
        f"üèõ –ó–∞–ª: {data['hall']}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"
    )
    
    await message.answer(confirmation, reply_markup=main_keyboard)
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())