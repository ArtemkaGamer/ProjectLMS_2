import sqlite3
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import html_decoration as hd
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = '7744367169:AAE_CnE7Y53k2Ib1gW_U8Bm5L9VGQj7AtnQ'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
MAX_PAGES = 3
MOVIES_PER_PAGE = 5

# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ª–æ–≤
CINEMA_NAME = "üåü Stellar Cinema"
WELCOME_STICKER = "CAACAgIAAxkBAAEBPKpoDhwKOhYtFehUUKr2NQ2XDAOVWwACRwADWbv8JVyd1qxN32EsNgQ"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ª–æ–≤
HALLS_CONFIG = {
    "–ó–∞–ª 1": {
        "seats_count": 30,
        "seats_per_row": 5,
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ª —Å —É–¥–æ–±–Ω—ã–º–∏ –∫—Ä–µ—Å–ª–∞–º–∏",
        "emoji": "ü™ë"
    },
    "–ó–∞–ª 2": {
        "seats_count": 25,
        "seats_per_row": 5,
        "description": "–ó–∞–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏",
        "emoji": "üöÄ"
    },
    "–ó–∞–ª 3": {
        "seats_count": 40,
        "seats_per_row": 8,
        "description": "–ë–æ–ª—å—à–æ–π –∑–∞–ª –¥–ª—è –ø—Ä–µ–º—å–µ—Ä–Ω—ã—Ö –ø–æ–∫–∞–∑–æ–≤",
        "emoji": "üé™"
    },
    "VIP –ó–∞–ª": {
        "seats_count": 10,
        "seats_per_row": 2,
        "description": "–ü—Ä–µ–º–∏—É–º –∑–∞–ª —Å –¥–∏–≤–∞–Ω–∞–º–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–º",
        "emoji": "üõãÔ∏è",
        "is_vip": True
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class Form(StatesGroup):
    movie = State()
    full_name = State()
    phone = State()
    seat = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS movies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        show_date TEXT NOT NULL,
        ticket_price INTEGER NOT NULL,
        hall TEXT NOT NULL
    )
    """)
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        full_name TEXT,
        phone TEXT,
        movie_title TEXT,
        show_date TEXT,
        ticket_price INTEGER,
        hall TEXT,
        seat_number INTEGER,
        booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    
    cursor.execute("SELECT COUNT(*) FROM movies")
    if cursor.fetchone()[0] == 0:
        test_movies = [
            ("–ê–≤–∞—Ç–∞—Ä", "2023-12-15 18:00", 350, "–ó–∞–ª 1"),
            ("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "2023-12-15 21:00", 300, "–ó–∞–ª 2"),
            ("–î—é–Ω–∞", "2023-12-16 15:00", 400, "–ó–∞–ª 3"),
            ("–ù–∞—á–∞–ª–æ", "2023-12-16 18:00", 250, "–ó–∞–ª 1"),
            ("–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å", "2023-12-16 21:00", 350, "–ó–∞–ª 2"),
            ("–ûppenheimer", "2023-12-17 20:00", 800, "VIP –ó–∞–ª"),
        ]
        cursor.executemany("INSERT INTO movies (title, show_date, ticket_price, hall) VALUES (?, ?, ?, ?)", test_movies)
    
    conn.commit()
    conn.close()

init_db()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="–û –Ω–∞—Å")]
    ],
    resize_keyboard=True
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ñ–∏–ª—å–º–∞
def get_booked_seats(movie_title, show_date):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    SELECT seat_number FROM bookings 
    WHERE movie_title = ? AND show_date = ?
    """, (movie_title, show_date))
    booked_seats = [row[0] for row in cursor.fetchall()]
    conn.close()
    return booked_seats

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–µ—Å—Ç–∞–º–∏
def generate_seats_keyboard(movie_title, show_date, hall_name):
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    booked_seats = get_booked_seats(movie_title, show_date)
    keyboard = []
    row_buttons = []
    
    for seat in range(1, hall_config["seats_count"] + 1):
        if seat in booked_seats:
            emoji = "‚ùå"  # –ó–∞–Ω—è—Ç–æ–µ –º–µ—Å—Ç–æ
        else:
            emoji = "üí∫" if not hall_config.get("is_vip", False) else "üõãÔ∏è"  # –ö—Ä–µ—Å–ª–æ –∏–ª–∏ –¥–∏–≤–∞–Ω
            
        row_buttons.append(InlineKeyboardButton(
            text=f"{emoji} {seat}",
            callback_data=f"seat_taken_{seat}" if seat in booked_seats else f"seat_{seat}"
        ))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if seat % hall_config["seats_per_row"] == 0 or seat == hall_config["seats_count"]:
            keyboard.append(row_buttons)
            row_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ª–µ
    info_button = InlineKeyboardButton(
        text=f"‚ÑπÔ∏è {hall_name}: {hall_config['description']}",
        callback_data="hall_info"
    )
    keyboard.append([info_button])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
def get_movies():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, show_date, ticket_price, hall FROM movies ORDER BY show_date")
    movies = cursor.fetchall()
    conn.close()
    return movies

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
def get_movie_info(title, date):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, show_date, ticket_price, hall FROM movies WHERE title = ? AND show_date = ?", (title, date))
    movie = cursor.fetchone()
    conn.close()
    return movie

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–∏–ª—å–º–∞–º–∏
def get_movies_page(page=1):
    movies = get_movies()
    total_pages = min(MAX_PAGES, (len(movies) + MOVIES_PER_PAGE - 1) // MOVIES_PER_PAGE)
    page = max(1, min(page, total_pages))
    
    start = (page - 1) * MOVIES_PER_PAGE
    end = start + MOVIES_PER_PAGE
    page_movies = movies[start:end]
    
    message = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ ‚Äì —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>\n\n"
    for title, date, price, hall in page_movies:
        hall_emoji = HALLS_CONFIG.get(hall, {}).get("emoji", "üé¨")
        message += f"{hall_emoji} <b>{hd.quote(title)}</b>\nüìÖ {hd.quote(date)}\nüíµ {price}‚ÇΩ\nüèõ {hall}\n\n"
    
    return message, page, total_pages

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def get_pagination_keyboard(page, total_pages):
    buttons = []
    
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if page < total_pages and page < MAX_PAGES:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    
    return InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ–∏–ª—å–º–∞–º–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def get_movies_booking_keyboard():
    movies = get_movies()
    keyboard = []
    for title, date, price, hall in movies:
        hall_emoji = HALLS_CONFIG.get(hall, {}).get("emoji", "üé¨")
        keyboard.append([InlineKeyboardButton(
            text=f"{hall_emoji} {title} ({date}) - {price}‚ÇΩ",
            callback_data=f"book_{title}_{date}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def save_booking(user_id, full_name, phone, movie_title, show_date, ticket_price, hall, seat_number):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO bookings (user_id, full_name, phone, movie_title, show_date, ticket_price, hall, seat_number)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, full_name, phone, movie_title, show_date, ticket_price, hall, seat_number))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer_sticker(WELCOME_STICKER)
    
    welcome_text = (
        f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {CINEMA_NAME} ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –æ–∂–∏–≤–∞—é—Ç –º–µ—á—Ç—ã! ‚ú®\n\n"
        "üé¨ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–∏–Ω–æ–æ–ø—ã—Ç —Å –ª—É—á—à–∏–º–∏ —Ñ–∏–ª—å–º–∞–º–∏ –≤ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.\n"
        "üí´ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ª—ã —Å Dolby Atmos, —É–¥–æ–±–Ω—ã–µ –∫—Ä–µ—Å–ª–∞ –∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restart
@dp.message(Command("restart"))
async def cmd_restart(message: types.Message):
    await message.answer(
        "üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@dp.message(F.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    schedule_text, page, total_pages = get_movies_page(1)
    keyboard = get_pagination_keyboard(page, total_pages)
    await message.answer(schedule_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    schedule_text, page, total_pages = get_movies_page(1)
    keyboard = get_pagination_keyboard(page, total_pages)
    await message.answer(schedule_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query(F.data.startswith("page_"))
async def process_pagination(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[1])
    schedule_text, current_page, total_pages = get_movies_page(page)
    keyboard = get_pagination_keyboard(current_page, total_pages)
    
    await callback.message.edit_text(
        text=schedule_text,
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
@dp.message(F.text.lower() == "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def start_booking(message: types.Message, state: FSMContext):
    await message.answer(
        "üéü –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_movies_booking_keyboard()
    )
    await state.set_state(Form.movie)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞
@dp.callback_query(F.data.startswith("book_"), Form.movie)
async def select_movie(callback: types.CallbackQuery, state: FSMContext):
    _, title, date = callback.data.split("_", 2)
    movie_info = get_movie_info(title, date)
    
    if not movie_info:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    await state.update_data(
        movie_title=title,
        show_date=date,
        ticket_price=movie_info[2],
        hall=movie_info[3]
    )
    
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    await state.set_state(Form.full_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@dp.message(Form.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)")
        return
    
    await state.update_data(full_name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(Form.phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if not phone.replace("+", "").isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    await state.update_data(phone=phone)
    
    data = await state.get_data()
    hall_name = data['hall']
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    
    seat_type = "–¥–∏–≤–∞–Ω—ã üõãÔ∏è" if hall_config.get("is_vip", False) else "–º–µ—Å—Ç–∞ üí∫"
    
    await message.answer(
        f"üìç –í—ã–±–µ—Ä–∏—Ç–µ {seat_type} –≤ –∑–∞–ª–µ {hall_name}:\n"
        f"üõãÔ∏è - —Å–≤–æ–±–æ–¥–Ω—ã–µ {seat_type}\n"
        "‚ùå - –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞",
        reply_markup=generate_seats_keyboard(data['movie_title'], data['show_date'], hall_name)
    )
    await state.set_state(Form.seat)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ª–µ
@dp.callback_query(F.data == "hall_info")
async def hall_info(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    hall_name = data['hall']
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    
    info_text = (
        f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ª–µ {hall_name}:</b>\n\n"
        f"{hall_config['emoji']} {hall_config['description']}\n"
        f"üî¢ –í—Å–µ–≥–æ –º–µ—Å—Ç: {hall_config['seats_count']}\n"
    )
    
    if hall_config.get("is_vip", False):
        info_text += (
            "\nüåü <b>VIP-—É—Å–ª—É–≥–∏:</b>\n"
            "‚Ä¢ –ú—è–≥–∫–∏–µ –¥–∏–≤–∞–Ω—ã –≤–º–µ—Å—Ç–æ –∫—Ä–µ—Å–µ–ª\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –∑–∞–∫—É—Å–∫–∏\n"
        )
    
    await callback.answer(info_text, show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
@dp.callback_query(F.data.startswith("seat_"), Form.seat)
async def select_seat(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith("seat_taken_"):
        await callback.answer("‚ùå –≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
        return
    
    seat_number = int(callback.data.split("_")[1])
    data = await state.get_data()
    hall_name = data['hall']
    
    booked_seats = get_booked_seats(data['movie_title'], data['show_date'])
    if seat_number in booked_seats:
        await callback.message.edit_reply_markup(
            reply_markup=generate_seats_keyboard(data['movie_title'], data['show_date'], hall_name)
        )
        await callback.answer("‚ùå –≠—Ç–æ –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
        return
    
    save_booking(
        user_id=callback.from_user.id,
        full_name=data['full_name'],
        phone=data['phone'],
        movie_title=data['movie_title'],
        show_date=data['show_date'],
        ticket_price=data['ticket_price'],
        hall=hall_name,
        seat_number=seat_number
    )
    
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    is_vip = hall_config.get("is_vip", False)
    
    confirmation = (
        f"‚úÖ <b>{'VIP-' if is_vip else ''}–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∞–Ω—Å–µ:</b>\n"
        f"üé¨ –§–∏–ª—å–º: {data['movie_title']}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['show_date']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: {data['ticket_price']}‚ÇΩ\n"
        f"üèõ –ó–∞–ª: {hall_name} {hall_config['emoji']}\n"
        f"{'üõãÔ∏è' if is_vip else 'üí∫'} –ú–µ—Å—Ç–æ: {seat_number}\n\n"
    )
    
    if is_vip:
        confirmation += (
            "üåü <b>VIP-—É—Å–ª—É–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã:</b>\n"
            "- –î–æ—Å—Ç—É–ø –≤ VIP-–ª–∞—É–Ω–∂\n"
            "- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫\n"
            "- –ü–ª–µ–¥ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—É—à–∫–∏\n\n"
        )
    
    confirmation += "–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"
    
    await callback.message.answer(confirmation, reply_markup=main_keyboard)
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@dp.message(Command("about_us"))
@dp.message(F.text.lower() == "–æ –Ω–∞—Å")
async def about_us(message: types.Message):
    about_text = (
        f"üåü <b>{CINEMA_NAME} ‚Äî –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä</b> üåü\n\n"
        "üé• –û—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –≤ 2010 –≥–æ–¥—É, –Ω–∞—à –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä —Å—Ç–∞–ª –∫—É–ª—å—Ç—É—Ä–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º –≥–æ—Ä–æ–¥–∞, "
        "–≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ª—É—á—à–∏–º–∏ —Ñ–∏–ª—å–º–∞–º–∏ –≤ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ.\n\n"
        "üèÜ <b>–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –õ—É—á—à–∏–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –≥–æ—Ä–æ–¥–∞ 2022-2023\n"
        "‚Ä¢ –û–±–ª–∞–¥–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏–∏ ¬´–ó–æ–ª–æ—Ç–æ–π —ç–∫—Ä–∞–Ω¬ª –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–µ—Ä–≤—ã–π –≤ —Ä–µ–≥–∏–æ–Ω–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π Dolby Atmos\n\n"
        "üí´ <b>–ù–∞—à–∏ –∑–∞–ª—ã:</b>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–ª–µ
    for hall_name, config in HALLS_CONFIG.items():
        about_text += (
            f"{config['emoji']} <b>{hall_name}</b>: {config['description']}\n"
            f"üî¢ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {config['seats_count']} {'–¥–∏–≤–∞–Ω–æ–≤' if config.get('is_vip', False) else '–º–µ—Å—Ç'}\n\n"
        )
    
    about_text += (
        "–ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤, –∞ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!"
    )
    
    await message.answer(about_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
