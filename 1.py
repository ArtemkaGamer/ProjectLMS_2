import sqlite3
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import html_decoration as hd
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import requests
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
import re
from datetime import datetime

API_TOKEN = '7744367169:AAE_CnE7Y53k2Ib1gW_U8Bm5L9VGQj7AtnQ'
CINEMA_NAME = "üåü Stellar Cinema"
WELCOME_STICKER = "CAACAgIAAxkBAAEBPKpoDhwKOhYtFehUUKr2NQ2XDAOVWwACRwADWbv8JVyd1qxN32EsNgQ"
MOVIES_PER_PAGE = 5
FILMRU_BASE_URL = "https://www.film.ru"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

HALLS_CONFIG = {
    "–ó–∞–ª 1": {
        "seats_count": 25,
        "seats_per_row": 5,
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ª —Å —É–¥–æ–±–Ω—ã–º–∏ –∫—Ä–µ—Å–ª–∞–º–∏",
        "emoji": "ü™ë"
    },
    "–ó–∞–ª 2": {
        "seats_count": 20,
        "seats_per_row": 5,
        "description": "–ó–∞–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–∫—É—Å—Ç–∏–∫–æ–π",
        "emoji": "üéß"
    },
    "–ó–∞–ª 3": {
        "seats_count": 15,
        "seats_per_row": 5,
        "description": "–ú–∞–ª—ã–π –∑–∞–ª –¥–ª—è –∫–∞–º–µ—Ä–Ω—ã—Ö –ø–æ–∫–∞–∑–æ–≤",
        "emoji": "üé¨"
    },
    "VIP –ó–∞–ª": {
        "seats_count": 10,
        "seats_per_row": 2,
        "description": "–ü—Ä–µ–º–∏—É–º –∑–∞–ª —Å –¥–∏–≤–∞–Ω–∞–º–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–º",
        "emoji": "üõãÔ∏è",
        "is_vip": True
    }
}

class Form(StatesGroup):
    movie = State()
    full_name = State()
    phone = State()
    seat = State()

def init_db():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS movies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        show_date TEXT NOT NULL,
        ticket_price INTEGER NOT NULL,
        hall TEXT NOT NULL,
        filmru_url TEXT,
        genres TEXT
    )
    """)
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        full_name TEXT,
        phone TEXT,
        movie_title TEXT,
        show_date TEXT,
        ticket_price INTEGER,
        hall TEXT,
        seat_number INTEGER,
        booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    
    cursor.execute("SELECT COUNT(*) FROM movies")
    if cursor.fetchone()[0] == 0:
        test_movies = [
            ("–ê–≤–∞—Ç–∞—Ä", "2024-01-20 18:00", 350, "–ó–∞–ª 1", "/movies/avatar", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –±–æ–µ–≤–∏–∫, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"),
            ("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "2024-01-20 21:00", 300, "–ó–∞–ª 2", "/movies/interstellar", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¥—Ä–∞–º–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"),
            ("–î—é–Ω–∞", "2024-01-21 15:00", 400, "–ó–∞–ª 3", "/movies/duna", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¥—Ä–∞–º–∞"),
            ("–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä", "2024-01-21 20:00", 500, "VIP –ó–∞–ª", "/movies/oppenheimer", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è, –¥—Ä–∞–º–∞, –∏—Å—Ç–æ—Ä–∏—è"),
        ]
        cursor.executemany(
            "INSERT INTO movies (title, show_date, ticket_price, hall, filmru_url, genres) VALUES (?, ?, ?, ?, ?, ?)", 
            test_movies
        )
    
    conn.commit()
    conn.close()

init_db()

async def get_movie_info_from_filmru(path):
    try:
        url = f"{FILMRU_BASE_URL}{path}"
        ua = UserAgent()
        headers = {
            'User-Agent': ua.random,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Referer': FILMRU_BASE_URL
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'lxml')
        
        title = soup.find('h2')
        title = title.get_text(strip=True) if title else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        rating = ""
        rating_block = soup.find('a', class_='wrapper_movies_scores_score')
        if rating_block:
            rating_text = rating_block.get_text(strip=True)
            rating_match = re.search(r'[\d\.]+', rating_text)
            rating = rating_match.group(0) if rating_match else "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"
        else:
            rating = "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        meta_block = soup.find('h1')
        year = ""
        if meta_block:
            year_tag = meta_block.find('span')
            year = year_tag.get_text(strip=True) if year_tag else ""
        
        description = soup.find('div', class_='wrapper_movies_text')
        if not description:
            description = soup.find('p', itemprop='description')
        description = description.get_text(" ", strip=True) if description else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        actors = []
        crew_block = soup.find('div', class_='wrapper_movies_crew')
        if not crew_block:
            return actors
        
        actor_elements = crew_block.find_all('a', href=lambda x: x and '/person/' in x)
        
        for actor_element in actor_elements:
            name_tag = actor_element.find('strong')
            if name_tag:
                actor_name = name_tag.get_text(strip=True)
                actors.append(actor_name)

        return {
            'title': title,
            'rating': rating,
            'year': year,
            'description': description,
            'actors': ', '.join(actors) if actors else "–ê–∫—Ç–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã",
            'url': url
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Film.ru: {str(e)}")
        return None

def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text="–û –Ω–∞—Å")]
        ],
        resize_keyboard=True
    )

def generate_movies_keyboard(page=1):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, show_date, ticket_price, hall FROM movies ORDER BY show_date")
    movies = cursor.fetchall()
    conn.close()
    
    total_pages = (len(movies) + MOVIES_PER_PAGE - 1) // MOVIES_PER_PAGE
    start = (page - 1) * MOVIES_PER_PAGE
    end = start + MOVIES_PER_PAGE
    page_movies = movies[start:end]
    
    keyboard = []
    for title, date, price, hall in page_movies:
        hall_emoji = HALLS_CONFIG.get(hall, {}).get("emoji", "üé¨")
        keyboard.append([
            InlineKeyboardButton(
                text=f"{hall_emoji} {title} ({date}) - {price}‚ÇΩ",
                callback_data=f"movie_{title}_{date}"
            )
        ])
    
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    
    if pagination:
        keyboard.append(pagination)
    
    keyboard.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def generate_seats_keyboard(movie_title, show_date, hall_name):
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    booked_seats = get_booked_seats(movie_title, show_date)
    keyboard = []
    row_buttons = []
    
    for seat in range(1, hall_config["seats_count"] + 1):
        if seat in booked_seats:
            emoji = "‚ùå"
        else:
            emoji = "üí∫" if not hall_config.get("is_vip", False) else "üõãÔ∏è"
            
        row_buttons.append(InlineKeyboardButton(
            text=f"{emoji} {seat}",
            callback_data=f"seat_taken_{seat}" if seat in booked_seats else f"seat_{seat}"
        ))
        
        if seat % hall_config["seats_per_row"] == 0 or seat == hall_config["seats_count"]:
            keyboard.append(row_buttons)
            row_buttons = []
    
    info_button = InlineKeyboardButton(
        text=f"‚ÑπÔ∏è {hall_name}: {hall_config['description']}",
        callback_data="hall_info"
    )
    keyboard.append([info_button])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_booked_seats(movie_title, show_date):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    SELECT seat_number FROM bookings 
    WHERE movie_title = ? AND show_date = ?
    """, (movie_title, show_date))
    booked_seats = [row[0] for row in cursor.fetchall()]
    conn.close()
    return booked_seats

def get_movie_info(title, date):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    SELECT title, show_date, ticket_price, hall, filmru_url, genres 
    FROM movies WHERE title = ? AND show_date = ?
    """, (title, date))
    movie = cursor.fetchone()
    conn.close()
    return movie

def save_booking(user_id, full_name, phone, movie_title, show_date, ticket_price, hall, seat_number):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO bookings (user_id, full_name, phone, movie_title, show_date, ticket_price, hall, seat_number)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, full_name, phone, movie_title, show_date, ticket_price, hall, seat_number))
    conn.commit()
    conn.close()

def delete_booking(booking_id):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM bookings WHERE id = ?", (booking_id,))
    conn.commit()
    conn.close()

def get_user_bookings(user_id):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    SELECT id, movie_title, show_date, ticket_price, hall, seat_number 
    FROM bookings WHERE user_id = ? ORDER BY show_date
    """, (user_id,))
    bookings = cursor.fetchall()
    conn.close()
    return bookings

def get_user_active_bookings(user_id):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    SELECT id, movie_title, show_date, ticket_price, hall, seat_number 
    FROM bookings WHERE user_id = ? AND show_date > ? ORDER BY show_date
    """, (user_id, now))
    bookings = cursor.fetchall()
    conn.close()
    return bookings

def generate_bookings_keyboard(bookings, is_active=False):
    keyboard = []
    for booking in bookings:
        booking_id, title, date, price, hall, seat = booking
        text = f"üé¨ {title} ({date}) - {hall}, –º–µ—Å—Ç–æ {seat}"
        if is_active:
            keyboard.append([
                InlineKeyboardButton(text=text, callback_data=f"booking_info_{booking_id}"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_booking_{booking_id}")
            ])
        else:
            keyboard.append([InlineKeyboardButton(text=text, callback_data=f"booking_info_{booking_id}")])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="personal_account")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer_sticker(WELCOME_STICKER)
    await message.answer(
        f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {CINEMA_NAME} ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –æ–∂–∏–≤–∞—é—Ç –º–µ—á—Ç—ã! ‚ú®\n\n"
        "üé¨ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–∏–Ω–æ–æ–ø—ã—Ç —Å –ª—É—á—à–∏–º–∏ —Ñ–∏–ª—å–º–∞–º–∏ –≤ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.\n"
        "üí´ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ª—ã —Å Dolby Atmos, —É–¥–æ–±–Ω—ã–µ –∫—Ä–µ—Å–ª–∞ –∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard()
    )

@dp.message(Command("restart"))
async def cmd_restart(message: types.Message):
    await message.answer("üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=main_keyboard())

@dp.message(F.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    await message.answer("üé¨ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤:", reply_markup=generate_movies_keyboard(1))

@dp.message(F.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="booking_history"),
            InlineKeyboardButton(text="üéü –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="active_bookings")
        ],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await message.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)

@dp.callback_query(F.data == "personal_account")
async def back_to_personal_account(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="booking_history"),
            InlineKeyboardButton(text="üéü –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="active_bookings")
        ],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await callback.message.edit_text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "booking_history")
async def show_booking_history(callback: types.CallbackQuery):
    bookings = get_user_bookings(callback.from_user.id)
    if not bookings:
        await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="personal_account")]]
        ))
    else:
        await callback.message.edit_text("üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:", 
            reply_markup=generate_bookings_keyboard(bookings))
    await callback.answer()

@dp.callback_query(F.data == "active_bookings")
async def show_active_bookings(callback: types.CallbackQuery):
    bookings = get_user_active_bookings(callback.from_user.id)
    if not bookings:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="personal_account")]]
        ))
    else:
        await callback.message.edit_text("üéü –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", 
            reply_markup=generate_bookings_keyboard(bookings, is_active=True))
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_booking_"))
async def delete_booking_handler(callback: types.CallbackQuery):
    booking_id = int(callback.data.split("_")[2])
    delete_booking(booking_id)
    
    bookings = get_user_active_bookings(callback.from_user.id)
    if not bookings:
        await callback.message.edit_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", 
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="personal_account")]]
            ))
    else:
        await callback.message.edit_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", 
            reply_markup=generate_bookings_keyboard(bookings, is_active=True))
    await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

@dp.callback_query(F.data.startswith("booking_info_"))
async def show_booking_info(callback: types.CallbackQuery):
    booking_id = int(callback.data.split("_")[2])
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute("""
    SELECT movie_title, show_date, ticket_price, hall, seat_number, full_name, phone 
    FROM bookings WHERE id = ?
    """, (booking_id,))
    booking = cursor.fetchone()
    conn.close()
    
    if booking:
        title, date, price, hall, seat, name, phone = booking
        message_text = (
            f"üé¨ –§–∏–ª—å–º: <b>{title}</b>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{date}</b>\n"
            f"üèõ –ó–∞–ª: <b>{hall}</b>\n"
            f"üí∫ –ú–µ—Å—Ç–æ: <b>{seat}</b>\n"
            f"üíµ –¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>\n\n"
            f"üë§ –§–ò–û: <b>{name}</b>\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>"
        )
        
        is_active = datetime.now().strftime("%Y-%m-%d %H:%M") < date
        back_callback = "active_bookings" if is_active else "booking_history"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]
        ])
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
    else:
        await callback.message.edit_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="personal_account")]]
        ))
    
    await callback.answer()

@dp.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[1])
    await callback.message.edit_reply_markup(reply_markup=generate_movies_keyboard(page))
    await callback.answer()

@dp.callback_query(F.data.startswith("movie_"))
async def show_movie_details(callback: types.CallbackQuery):
    _, title, date = callback.data.split("_", 2)
    movie_info = get_movie_info(title, date)
    
    if not movie_info:
        await callback.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    movie_details = await get_movie_info_from_filmru(movie_info[4])
    
    if not movie_details:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ")
        return
    
    message_text = (
        f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{movie_info[0]}</b>\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{movie_details.get('rating', 'N/A')}</b>\n"
        f"üìÖ –ì–æ–¥: <b>{movie_details.get('year', 'N/A')}</b>\n"
        f"üé≠ –ñ–∞–Ω—Ä—ã: <b>{movie_info[5] if len(movie_info) > 5 and movie_info[5] else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</b>\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{movie_details.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
        f"<b>–í –≥–ª–∞–≤–Ω—ã—Ö —Ä–æ–ª—è—Ö:</b>\n{movie_details.get('actors', '–ê–∫—Ç–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n\n"
        f"üîó <a href='{FILMRU_BASE_URL}{movie_info[4]}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ Film.ru</a>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé´ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{title}_{date}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="page_1")]
    ])
    
    if movie_details.get('poster_url'):
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=movie_details['poster_url'],
            caption=message_text,
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(message_text, reply_markup=keyboard)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("book_"))
async def start_booking_from_inline(callback: types.CallbackQuery, state: FSMContext):
    _, title, date = callback.data.split("_", 2)
    movie_info = get_movie_info(title, date)
    
    if not movie_info:
        await callback.message.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    await state.update_data(
        movie_title=title,
        show_date=date,
        ticket_price=movie_info[2],
        hall=movie_info[3]
    )
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(Form.full_name)
    await callback.answer()

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=None)
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    await callback.answer()

@dp.message(F.text.lower() == "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def start_booking(message: types.Message, state: FSMContext):
    await message.answer("üéü –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=generate_movies_keyboard(1))
    await state.set_state(Form.movie)

@dp.callback_query(F.data.startswith("book_"), Form.movie)
async def select_movie(callback: types.CallbackQuery, state: FSMContext):
    _, title, date = callback.data.split("_", 2)
    movie_info = get_movie_info(title, date)
    
    if not movie_info:
        await callback.message.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    await state.update_data(
        movie_title=title,
        show_date=date,
        ticket_price=movie_info[2],
        hall=movie_info[3]
    )
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(Form.full_name)
    await callback.answer()

@dp.message(Form.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)")
        return
    
    await state.update_data(full_name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if not phone.replace("+", "").isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
        return
    
    await state.update_data(phone=phone)
    data = await state.get_data()
    hall_name = data['hall']
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    
    seat_type = "–¥–∏–≤–∞–Ω—ã üõãÔ∏è" if hall_config.get("is_vip", False) else "–º–µ—Å—Ç–∞ üí∫"
    await message.answer(
        f"üìç –í—ã–±–µ—Ä–∏—Ç–µ {seat_type} –≤ –∑–∞–ª–µ {hall_name}:",
        reply_markup=generate_seats_keyboard(data['movie_title'], data['show_date'], hall_name)
    )
    await state.set_state(Form.seat)

@dp.callback_query(F.data == "hall_info")
async def hall_info(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    hall_name = data['hall']
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    
    info_text = (
        f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ª–µ {hall_name}:</b>\n\n"
        f"{hall_config['emoji']} {hall_config['description']}\n"
        f"üî¢ –í—Å–µ–≥–æ –º–µ—Å—Ç: {hall_config['seats_count']}\n"
    )
    
    if hall_config.get("is_vip", False):
        info_text += (
            "\nüåü <b>VIP-—É—Å–ª—É–≥–∏:</b>\n"
            "‚Ä¢ –ú—è–≥–∫–∏–µ –¥–∏–≤–∞–Ω—ã –≤–º–µ—Å—Ç–æ –∫—Ä–µ—Å–µ–ª\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –∑–∞–∫—É—Å–∫–∏\n"
        )
    
    await callback.answer(info_text, show_alert=True)

@dp.callback_query(F.data.startswith("seat_"), Form.seat)
async def select_seat(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith("seat_taken_"):
        await callback.answer("‚ùå –ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ!", show_alert=True)
        return
    
    seat_number = int(callback.data.split("_")[1])
    data = await state.get_data()
    hall_name = data['hall']
    
    booked_seats = get_booked_seats(data['movie_title'], data['show_date'])
    if seat_number in booked_seats:
        await callback.message.edit_reply_markup(
            reply_markup=generate_seats_keyboard(data['movie_title'], data['show_date'], hall_name)
        )
        await callback.answer("‚ùå –ú–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏!", show_alert=True)
        return
    
    save_booking(
        user_id=callback.from_user.id,
        full_name=data['full_name'],
        phone=data['phone'],
        movie_title=data['movie_title'],
        show_date=data['show_date'],
        ticket_price=data['ticket_price'],
        hall=hall_name,
        seat_number=seat_number
    )
    
    hall_config = HALLS_CONFIG.get(hall_name, HALLS_CONFIG["–ó–∞–ª 1"])
    is_vip = hall_config.get("is_vip", False)
    
    confirmation = (
        f"‚úÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"<b>–°–µ–∞–Ω—Å:</b>\n"
        f"üé¨ –§–∏–ª—å–º: {data['movie_title']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['show_date']}\n"
        f"üíµ –¶–µ–Ω–∞: {data['ticket_price']}‚ÇΩ\n"
        f"üèõ –ó–∞–ª: {hall_name} {hall_config['emoji']}\n"
        f"{'üõãÔ∏è' if is_vip else 'üí∫'} –ú–µ—Å—Ç–æ: {seat_number}\n\n"
    )
    
    if is_vip:
        confirmation += "üåü <b>–í–∫–ª—é—á–µ–Ω—ã VIP-—É—Å–ª—É–≥–∏</b>\n"
    
    confirmation += "–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"
    
    await callback.message.answer(confirmation, reply_markup=main_keyboard())
    await state.clear()
    await callback.answer()

@dp.message(Command("about_us"))
@dp.message(F.text.lower() == "–æ –Ω–∞—Å")
async def about_us(message: types.Message):
    about_text = (
        f"üåü <b>{CINEMA_NAME} ‚Äî –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä</b> üåü\n\n"
        "üé• –û—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –≤ 2010 –≥–æ–¥—É, –Ω–∞—à –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä —Å—Ç–∞–ª –∫—É–ª—å—Ç—É—Ä–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º –≥–æ—Ä–æ–¥–∞, "
        "–≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ª—É—á—à–∏–º–∏ —Ñ–∏–ª—å–º–∞–º–∏ –≤ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ.\n\n"
        "üèÜ <b>–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –õ—É—á—à–∏–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –≥–æ—Ä–æ–¥–∞ 2022-2023\n"
        "‚Ä¢ –û–±–ª–∞–¥–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏–∏ ¬´–ó–æ–ª–æ—Ç–æ–π —ç–∫—Ä–∞–Ω¬ª –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–µ—Ä–≤—ã–π –≤ —Ä–µ–≥–∏–æ–Ω–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π Dolby Atmos\n\n"
        "üí´ <b>–ù–∞—à–∏ –∑–∞–ª—ã:</b>\n"
    )
    
    for hall_name, config in HALLS_CONFIG.items():
        about_text += (
            f"{config['emoji']} <b>{hall_name}</b>: {config['description']}\n"
            f"üî¢ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {config['seats_count']} {'–¥–∏–≤–∞–Ω–æ–≤' if config.get('is_vip', False) else '–º–µ—Å—Ç'}\n\n"
        )
    
    about_text += "–ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤, –∞ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!"
    await message.answer(about_text)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())